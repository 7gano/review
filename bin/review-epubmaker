#!/usr/bin/env ruby
#
# Copyright (c) 2010 Kenshi Muto
#
# This program is free software.
# You can distribute or modify this program under the terms of
# the GNU LGPL, Lesser General Public License version 2.1.
# For details of the GNU LGPL, see the file "COPYING".
#

require 'tmpdir'
require 'fileutils'
require 'yaml'
require 'optparse'
require 'rexml/document'

def main
  values = { # These parameters can be overridden by YAML file.
    "bookname"=> "sample", # it defines epub file name also
    "booktitle" => "ReVIEW EPUBサンプル",
    "aut" => "吟遊詩人", # author
    "prt" => nil, # printer(publisher)
    "asn" => nil, # associated name
    "ant" => nil, # bibliographic antecedent
    "clb" => nil, # Collaborator
    "edt" => nil, # Editor
    "dsr" => nil, # Designer
    "ill" => nil, # Illustrator
    "pht" => nil, # Photographer
    "trl" => nil, # Translator
    "date" => nil, # publishing date
    "rights" => nil, # Copyright messages
    "description" => nil, # Description
    "urnid" => "example.jp", # just used for unique ID
    "stylesheet" => "stylesheet.css", # stylesheet file
    "coverfile" => nil, # content file of body of cover page
    "params" => "", # specify review2epub parameters
  }

  if ARGV.size == 1
    values = values.merge(YAML.load_file(ARGV[0]))
  end
  
  bookname = values["bookname"]

  if File.exist?("#{bookname}.epub")
    STDERR.puts "#{bookname}.epub exists. Please remove or rename first."
    exit 1
  end
  if File.exist?("#{bookname}")
    STDERR.puts "#{bookname} directory exists. Please remove or rename first."
    exit 1
  end

  identifier = "urn:uuid:#{values["urnid"]}_#{bookname}"

  tmp = @debug.nil? ? Dir.mktmpdir : "."
  Dir.mkdir("#{tmp}/#{bookname}")
  
  # MIME type
  File.open("#{tmp}/#{bookname}/mimetype", "w") {|f|
    f.puts "application/epub+zip"
  }
  
  Dir.mkdir("#{tmp}/#{bookname}/OEBPS")
  # XHTML
  pre = 0
  body = 0
  post = 0
  @manifeststr = ""
  @ncxstr = ""
  @tocstr = ""
  toccount = 1
  
  if File.exists?("PREDEF")
    File.open("PREDEF") {|chaps|
      chaps.each_line {|l|
        next if l =~ /^#/
        pre = pre + 1
        toccount = toccount + 1
        fork {
          STDOUT.reopen("#{tmp}/#{bookname}/OEBPS/pre#{pre}.html")
          exec("review-compile --target=epub #{values["params"]} #{l}")
        }
        Process.waitall
        @manifeststr << %Q(<item id="pre#{pre}" href="pre#{pre}.html" media-type="application/xhtml+xml" />\n)
        @ncxstr << %Q(<itemref idref="pre#{pre}" />\n)
        @tocstr << %Q[<navPoint id="pre#{pre}" playOrder="#{toccount}">\n<navLabel><text>#{getTitle("#{tmp}/#{bookname}/OEBPS/pre#{pre}.html")}</text></navLabel>\n<content src="pre#{pre}.html"/>\n</navPoint>\n]
      }
    }
  end
  if File.exists?("CHAPS")
    File.open("CHAPS") {|chaps|
      chaps.each_line {|l|
        body = body + 1
        toccount = toccount + 1
        next if l =~ /^#/
        fork {
          STDOUT.reopen("#{tmp}/#{bookname}/OEBPS/chap#{body}.html")
          exec("review-compile --target=epub #{values["params"]} #{l}")
        }
        Process.waitall
        @manifeststr << %Q(<item id="chap#{body}" href="chap#{body}.html" media-type="application/xhtml+xml" />\n)
        @ncxstr << %Q(<itemref idref="chap#{body}" />\n)
        @tocstr << %Q[<navPoint id="chap#{body}" playOrder="#{toccount}">\n<navLabel><text>#{getTitle("#{tmp}/#{bookname}/OEBPS/chap#{body}.html")}</text></navLabel>\n<content src="chap#{body}.html"/>\n</navPoint>\n]
      }
    }
  end
  if File.exists?("POSTDEF")
    File.open("POSTDEF") {|chaps|
      chaps.each_line {|l|
        next if l =~ /^#/
        post = post + 1
        toccount = toccount + 1
        fork {
          STDOUT.reopen("#{tmp}/#{bookname}/OEBPS/post#{post}.html")
          exec("review-compile --target=epub #{values["params"]} #{l}")
        }
        Process.waitall
        @manifeststr << %Q(<item id="post#{post}" href="post#{post}.html" media-type="application/xhtml+xml" />\n)
        @ncxstr << %Q(<itemref idref="post#{post}" />\n)
        @tocstr << %Q[<navPoint id="post#{post}" playOrder="#{toccount}">\n<navLabel><text>#{getTitle("#{tmp}/#{bookname}/OEBPS/post#{post}.html")}</text></navLabel>\n<content src="post#{post}.html"/>\n</navPoint>\n]
      }
    }
  end
  if File.exist?("images")
    Dir.mkdir("#{tmp}/#{bookname}/OEBPS/images")
    copyImagesToDir("images", "#{tmp}/#{bookname}/OEBPS/images")
  end
  
  # container
  Dir.mkdir("#{tmp}/#{bookname}/META-INF")
  File.open("#{tmp}/#{bookname}/META-INF/container.xml", "w") {|f|
    f.puts <<EOT
<?xml version="1.0" encoding="UTF-8"?>
<container xmlns="urn:oasis:names:tc:opendocument:xmlns:container" version="1.0">
  <rootfiles>
    <rootfile full-path="OEBPS/#{bookname}.opf" media-type="application/oebps-package+xml" />
  </rootfiles>
</container>
EOT
  }

# opf (meta info)
  # FIXME:メタ情報
  File.open("#{tmp}/#{bookname}/OEBPS/#{bookname}.opf", "w") {|f|
    f.puts <<EOT
<?xml version="1.0" encoding="UTF-8"?>
<package version="2.0" xmlns="http://www.idpf.org/2007/opf" unique-identifier="BookId">
 <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
   <dc:title>#{values["booktitle"]}</dc:title>
EOT

   f.puts %Q(<dc:creator opf:role="aut">#{values["aut"]}</dc:creator>) unless values["aut"].nil? # FIXME: support multiple members

   f.puts %Q(<dc:publisher opf:role="prt">#{values["prt"]}</dc:publisher>) unless values["prt"].nil?

   f.puts %Q(<dc:date>#{values["date"]}</dc:date>) unless values["date"].nil?
   f.puts %Q(<dc:rights>#{values["rights"]}</dc:rights>) unless values["rights"].nil?

   f.puts %Q(<dc:contributor opf:role="asn">#{values["asn"]}</dc:contributor>) unless values["asn"].nil?
   f.puts %Q(<dc:contributor opf:role="ant">#{values["ant"]}</dc:contributor>) unless values["ant"].nil?
   f.puts %Q(<dc:contributor opf:role="clb">#{values["clb"]}</dc:contributor>) unless values["clb"].nil?
   f.puts %Q(<dc:contributor opf:role="edt">#{values["edt"]}</dc:contributor>) unless values["edt"].nil?
   f.puts %Q(<dc:contributor opf:role="dsr">#{values["dsr"]}</dc:contributor>) unless values["dsr"].nil?
   f.puts %Q(<dc:contributor opf:role="ill">#{values["ill"]}</dc:contributor>) unless values["ill"].nil?
   f.puts %Q(<dc:contributor opf:role="pht">#{values["pht"]}</dc:contributor>) unless values["pht"].nil?
   f.puts %Q(<dc:contributor opf:role="trl">#{values["trl"]}</dc:contributor>) unless values["trl"].nil?

   f.puts %Q(<dc:description>#{values["description"]}</dc:description>) unless values["description"].nil?

    f.puts <<EOT
   <dc:language>ja</dc:language>
   <dc:identifier id="BookId">#{identifier}</dc:identifier>
 </metadata>
 <manifest>
  <item id="ncx" href="#{bookname}.ncx" media-type="text/xml" />
  <item id="style" href="#{values["stylesheet"]}" media-type="text/css" />
  <item id="#{bookname}" href="#{bookname}.html" media-type="application/xhtml+xml" />
EOT
    f.puts @manifeststr
    f.puts <<EOT
 </manifest>
 <spine toc="ncx">
  <itemref idref="#{bookname}" />
EOT
    f.puts @ncxstr
    f.puts <<EOT
 </spine>
</package>
EOT
  }

  # ncx (toc)
  File.open("#{tmp}/#{bookname}/OEBPS/#{bookname}.ncx", "w") {|f|
    f.puts <<EOT
<?xml version="1.0" encoding="UTF-8"?>
<ncx xmlns="http://www.daisy.org/z3986/2005/ncx/" version="2005-1">
  <head>
    <meta name="dtb:uid" content="#{identifier}"/>
    <meta name="dtb:depth" content="1"/>
    <meta name="dtb:totalPageCount" content="0"/>
    <meta name="dtb:maxPageNumber" content="0"/>
  </head>
  <docTitle>
    <text>#{values["booktitle"]}</text>
  </docTitle>
  <docAuthor>
	<text>#{values["aut"].nil? ? "" : values["aut"]}</text>
  </docAuthor>
  <navMap>
    <navPoint id="#{bookname}" playOrder="1">
      <navLabel>
        <text>Contents</text>
      </navLabel>
      <content src="#{bookname}.html"/>
    </navPoint>
EOT
    f.puts @tocstr
    f.puts <<EOT
  </navMap>
</ncx>
EOT
  }
  
  # Cover page
  File.open("#{tmp}/#{bookname}/OEBPS/#{bookname}.html", "w") {|f|
    f.puts <<EOT
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ops=" http://www.idpf.org/2007/ops" xml:lang="ja" lang="ja">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <link rel="stylesheet" type="text/css" href="#{values["stylesheet"]}"/>
  <meta name="generator" content="ReVIEW EPUB Maker"/>
  <title>#{values["booktitle"]}</title>
</head>
<body>
EOT
    if !values["coverfile"].nil? && File.exist?(values["coverfile"])
      File.open(values["coverfile"]) {|f2|
        f2.each_line {|l|
          f.puts l
        }
      }
    else
      f.puts <<EOT
<h1>#{values["booktitle"]}</h1>
EOT
    end

    f.puts <<EOT
</body>
</html>
EOT
  }

  # stylesheet
  File.open("#{tmp}/#{bookname}/OEBPS/stylesheet.css", "w") {|f|
    # FIXME: スタイルシート
    f.puts <<EOT
/* sample style sheet for epub */
@charset "utf-8";

body {
}
EOT
  }
  if File.exist?(values["stylesheet"])
    FileUtils.ln values["stylesheet"], "#{tmp}/#{bookname}/OEBPS/#{values["stylesheet"]}"
  end
  
  # Zip epubファイルの作成。mimetypeは圧縮しないようにする
  fork {
    basedir = Dir.pwd
    Dir.chdir("#{tmp}/#{bookname}") {|d|
      exec("zip -0 #{basedir}/#{bookname}.epub mimetype")
    }
  }
  Process.waitall
  fork {
    basedir = Dir.pwd
    Dir.chdir("#{tmp}/#{bookname}") {|d|
      exec("zip -r #{basedir}/#{bookname}.epub META-INF OEBPS")
    }
  }
  Process.waitall
  
  FileUtils.rm_r(tmp) if @debug.nil?
end

def copyImagesToDir(dirname, copybase)
  Dir.open(dirname) {|dir|
    dir.each {|fname|
      next if fname =~ /^\./
      if FileTest.directory?("#{dirname}/#{fname}")
        copyImagesToDir("#{dirname}/#{fname}", "#{copybase}/#{fname}")
      else
        if fname =~ /\.(png|gif|jpg|jpeg|svg)$/i
          Dir.mkdir(copybase) unless File.exist?(copybase)
          FileUtils.ln "#{dirname}/#{fname}", copybase
          figid = fname.sub(/\.(png|gif|jpg|jpeg|svg)$/, '')
          mime = nil
          case fname.downcase.match(/\.(png|gif|jpg|jpeg|svg)$/)[1]
            when "png": mime = "image/png"
            when "gif": mime = "image/gif"
            when "jpg", "jpeg": mime = "image/jpeg"
            when "svg": mime = "image/svg+xml"
          else
            raise "unsupported type #{fname}"
          end
          @manifeststr << %Q(<item id="fig-#{figid}" href="#{dirname}/#{fname}" media-type="#{mime}" />\n)
        end
      end
    }
  }
end

def getTitle(filename)
  File.open(filename) {|f|
    return REXML::Document.new(f).elements["//html/head/title"].text
  }
end

@debug = 1
main
